# -*- coding: utf-8 -*-
# example_usage_2gis.py ‚Äî –∑–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ CSV —Å 2–ì–ò–° API
import os
import sys
from route_optimizer_2gis import RouteOptimizer2GIS, save_json

def main():
    print("üöÄ –¢–ï–°–¢: 2–ì–ò–° –º–∞—Ç—Ä–∏—Ü–∞ (–ø—Ä–æ–±–∫–∏) + –æ–∫–Ω–∞/–æ–±–µ–¥/–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")

    # 1) –ü—É—Ç—å –∫ CSV: –±–µ—Ä—ë–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(sys.argv) > 1:
        csv_path = os.path.abspath(sys.argv[1])
    else:
        # –§–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —ç—Ç–æ–π –∂–µ –ø–∞–ø–∫–µ) ‚Äî –∏–º—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        base_dir = os.path.dirname(__file__)
        candidate = os.path.join(base_dir, "Data Set - –õ–∏—Å—Ç1.csv")
        if os.path.exists(candidate):
            csv_path = candidate
        else:
            # –ø—Ä–µ–∂–Ω–∏–π fallback
            csv_path = os.path.abspath(os.path.join(base_dir, "test_list - –õ–∏—Å—Ç1.csv"))

    if not os.path.exists(csv_path):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CSV: ", csv_path)
        print("üëâ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–∞–∫: python example_usage_2gis.py \"/–ø—É—Ç—å/–∫/Data Set - –õ–∏—Å—Ç1.csv\"")
        return

    work_start = (input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (HH:MM, –Ω–∞–ø—Ä. 09:00): ").strip() or "09:00")
    work_end   = (input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã (HH:MM, –Ω–∞–ø—Ä. 18:00): ").strip() or "18:00")
    meet_str   = (input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞, –º–∏–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip() or "30")
    try:
        meet_min = int(meet_str)
    except:
        meet_min = 30

    key = os.getenv("DGIS_API_KEY", "")
    if not key:
        print("‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DGIS_API_KEY –ø—É—Å—Ç–∞—è ‚Äî –±—É–¥–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–æ—Ü–µ–Ω–∫–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞).")

    opt = RouteOptimizer2GIS(key)
    result = opt.optimize_from_csv(csv_path, work_start, work_end, meet_min)

    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã: {result['external_provider']} (uses_external_api={result['uses_external_api']})")
    print(f"–†–∞–±–æ—á–µ–µ –æ–∫–Ω–æ: {result['work_window']['start']} - {result['work_window']['end']}")
    print(f"–¢–æ—á–µ–∫ –≤ CSV: {result['n_points']}, –ø–æ—Å–µ—â–µ–Ω–æ: {result['stats']['visited_count']}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {result['stats']['dropped_count']}")
    print(f"–ò—Ç–æ–≥: {result['stats']['total_distance_km']} –∫–º, {result['stats']['total_drive_min']} –º–∏–Ω –≤ –¥–≤–∏–∂–µ–Ω–∏–∏\n")

    for i, leg in enumerate(result["schedule"], 1):
        mv = " (—Å–¥–≤–∏–Ω—É–ª –∏–∑-–∑–∞ –æ–±–µ–¥–∞)" if leg.get("moved_by_lunch") else ""
        print(f"{i:02d}. [{leg['id']}] {leg['address']}\n    –ø—Ä–∏–±—ã—Ç–∏–µ {leg['arrive']}, —Å—Ç–∞—Ä—Ç {leg['start']}, –∫–æ–Ω–µ—Ü {leg['end']}, –¥–æ—Ä–æ–≥–∞ {leg['travel_min']} –º–∏–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ {leg['wait_min']} –º–∏–Ω{mv}")

    out_name = "optimization_results_2gis.json"
    out_path = os.path.abspath(os.path.join(os.path.dirname(csv_path), out_name))
    save_json(result, out_path)
    print(f"\nüíæ JSON-–æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ä—è–¥–æ–º —Å CSV: {out_path}")

if __name__ == "__main__":
    main()
